generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  pending
  shipped
  delivered
  cancelled
}

model User {
  id            String   @id @default(uuid()) @db.Uuid
  name          String   @db.VarChar(255)
  email         String   @unique @db.VarChar(255)
  password_hash String   @db.VarChar(255)
  created_at    DateTime @default(now())

  @@map("users")
}

model Category {
  id          String     @id @default(uuid()) @db.Uuid
  name        String
  slug        String     @unique
  parentId    String?    @db.Uuid
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Category[] @relation("CategoryHierarchy")
  products    Product[]

  @@map("category")
}

model Color {
  id            String         @id @default(uuid()) @db.Uuid
  name          String         @db.VarChar(50)
  hex           String?        @db.VarChar(10)
  productColors ProductColor[]

  @@map("colors")
}

model Size {
  id                String              @id @default(uuid()) @db.Uuid
  label             String              @unique @db.VarChar(10)
  productSizeStocks ProductSizeStock[]

  @@map("sizes")
}

model Product {
  id               String         @id @default(uuid()) @db.Uuid
  name             String         @db.VarChar(255)
  description      String?        @db.Text
  category_id      String?        @db.Uuid
  solde_percentage Int?           @db.Integer
  top_price        Boolean        @default(false)
  created_at       DateTime       @default(now())
  updated_at       DateTime       @default(now()) @updatedAt

  category         Category?      @relation(fields: [category_id], references: [id], onDelete: SetNull)
  productColors    ProductColor[]
  likes            Like[]

  @@map("products")
}

model ProductColor {
  id                String             @id @default(uuid()) @db.Uuid
  product_id        String             @db.Uuid
  color_id          String             @db.Uuid
  image_url         String?            @db.Text

  product           Product            @relation(fields: [product_id], references: [id], onDelete: Cascade)
  color             Color              @relation(fields: [color_id], references: [id], onDelete: Restrict)
  productSizeStocks ProductSizeStock[]

  @@unique([product_id, color_id])
  @@map("product_colors")
}

model ProductSizeStock {
  id               String      @id @default(uuid()) @db.Uuid
  product_color_id String      @db.Uuid
  size_id          String      @db.Uuid
  stock            Int         @default(0) @db.Integer
  price            Decimal     @db.Decimal(10, 2)

  productColor     ProductColor @relation(fields: [product_color_id], references: [id], onDelete: Cascade)
  size             Size         @relation(fields: [size_id], references: [id], onDelete: Restrict)
  panelItems       PanelItem[]
  orderItems       OrderItem[]

  @@unique([product_color_id, size_id])
  @@map("product_size_stocks")
}

model GuestUser {
  session_id String      @id @db.VarChar(255)
  created_at DateTime    @default(now())
  expires_at DateTime

  likes      Like[]
  panelItems PanelItem[]
  orders     Order[]

  @@map("guest_users")
}

model Like {
  id               String    @id @default(uuid()) @db.Uuid
  guest_session_id String    @db.VarChar(255)
  product_id       String    @db.Uuid
  liked_at         DateTime  @default(now())

  guestUser        GuestUser @relation(fields: [guest_session_id], references: [session_id], onDelete: Cascade)
  product          Product   @relation(fields: [product_id], references: [id], onDelete: Cascade)

  @@unique([guest_session_id, product_id])
  @@map("likes")
}

model PanelItem {
  id                    String           @id @default(uuid()) @db.Uuid
  guest_session_id      String           @db.VarChar(255)
  product_size_stock_id String           @db.Uuid
  quantity              Int              @db.Integer
  added_at              DateTime         @default(now())

  guestUser             GuestUser        @relation(fields: [guest_session_id], references: [session_id], onDelete: Cascade)
  productSizeStock      ProductSizeStock @relation(fields: [product_size_stock_id], references: [id], onDelete: Cascade)

  @@unique([guest_session_id, product_size_stock_id])
  @@map("panel_items")
}

model Order {
  id               String      @id @default(uuid()) @db.Uuid
  guest_session_id String      @db.VarChar(255)
  ref_id           String      @unique @db.VarChar(50)
  name             String      @db.VarChar(255)
  phone            String      @db.VarChar(50)
  city          String      @db.Text
  shipping_cost    Decimal     @default(0) @db.Decimal(10, 2)
  shipping_option  String?     @db.VarChar(100)
  status           OrderStatus @default(pending)
  created_at       DateTime    @default(now())

  guestUser        GuestUser   @relation(fields: [guest_session_id], references: [session_id], onDelete: Cascade)
  orderItems       OrderItem[]

  @@map("orders")
}

model OrderItem {
  id                    String           @id @default(uuid()) @db.Uuid
  order_id              String           @db.Uuid
  product_size_stock_id String           @db.Uuid
  quantity              Int              @db.Integer
  price_at_purchase     Decimal          @db.Decimal(10, 2)

  order                 Order            @relation(fields: [order_id], references: [id], onDelete: Cascade)
  productSizeStock      ProductSizeStock @relation(fields: [product_size_stock_id], references: [id], onDelete: Restrict)

  @@unique([order_id, product_size_stock_id])
  @@map("order_items")
}